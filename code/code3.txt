>>> bltn_funcs

>>> cd/

================
=  cd/ft_cd.c  =
================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_cd.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: anjbaiju <anjbaiju@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/08/21 22:16:22 by kadferna          #+#    #+#             */
/*   Updated: 2025/09/24 14:54:59 by anjbaiju         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../../minishell.h"

int	add_env_variable(char ***envp_ptr, const char *new_var_str)
{
	int		count;
	char	**new_envp;

	if (!envp_ptr || !*envp_ptr || !new_var_str)
		return (1);
	count = 0;
	while ((*envp_ptr)[count] != NULL)
		count++;
	new_envp = malloc(sizeof(char *) * (count + 2));
	if (!new_envp)
		return (perror("minishell: malloc failed"), 1);
	count = -1;
	while ((*envp_ptr)[++count] != NULL)
		new_envp[count] = (*envp_ptr)[count];
	new_envp[count] = ft_strdup(new_var_str);
	if (!new_envp[count])
	{
		free(new_envp);
		return (perror("minishell: ft_strdup failed"), 1);
	}
	new_envp[count + 1] = NULL;
	free(*envp_ptr);
	*envp_ptr = new_envp;
	return (0);
}

void	set_value(char ***envp_ptr, char *new_var_str, int i)
{
	(*envp_ptr)[i] = new_var_str;
}

void	update_env_var(char ***envp_ptr, const char *var_name,
		const char *value)
{
	size_t	name_len;
	size_t	value_len;
	char	*new_var_str;
	int		i;

	name_len = ft_strlen(var_name);
	value_len = ft_strlen(value);
	new_var_str = malloc(name_len + value_len + 2);
	if (!new_var_str)
		return (perror("minishell: malloc failed"));
	ft_memcpy(new_var_str, var_name, name_len);
	new_var_str[name_len] = '=';
	ft_memcpy(new_var_str + name_len + 1, value, value_len + 1);
	i = 0;
	while ((*envp_ptr)[i])
	{
		if (ft_strncmp((*envp_ptr)[i], var_name, name_len) == 0
			&& ((*envp_ptr)[i])[name_len] == '=')
			return (free((*envp_ptr)[i]), set_value(envp_ptr, new_var_str, i));
		i++;
	}
	if (add_env_variable(envp_ptr, new_var_str) != 0)
		perror("minishell: failed to add env variable");
	free(new_var_str);
}

char	*get_env_value(char *var_name, char **envp)
{
	int		i;
	size_t	len;

	i = 0;
	len = ft_strlen(var_name);
	while (envp[i])
	{
		if (ft_strncmp(envp[i], var_name, len) == 0 && envp[i][len] == '=')
			return (envp[i] + len + 1);
		i++;
	}
	return (NULL);
}

int	ft_cd(char **argv, char ***envp_ptr)
{
	char	old_pwd[PATH_MAX];
	char	*target_dir;

	if (getcwd(old_pwd, sizeof(old_pwd)) == NULL)
		return (perror("cd : getcwd error"), 1);
	target_dir = resolve_target_dir(argv, *envp_ptr);
	return (change_directory(target_dir, *envp_ptr, old_pwd));
}

======================
=  cd/ft_cd_utils.c  =
======================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_cd_utils.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: anjbaiju <anjbaiju@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/09/24 14:53:11 by anjbaiju          #+#    #+#             */
/*   Updated: 2025/09/24 14:54:01 by anjbaiju         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../../minishell.h"

char	*handle_home_dash(char *arg, char **envp)
{
	char	*target_dir;

	target_dir = NULL;
	if (arg == NULL || ft_strcmp(arg, "~") == 0)
	{
		target_dir = get_env_value("HOME", envp);
		if (!target_dir)
			ft_putstr_fd("minishell: cd: HOME not set\n", STDERR_FILENO);
	}
	else if (ft_strcmp(arg, "-") == 0)
	{
		target_dir = get_env_value("OLDPWD", envp);
		if (!target_dir)
			ft_putstr_fd("minishell: cd: OLDPWD not set\n", STDERR_FILENO);
		else
		{
			ft_putstr_fd(target_dir, STDOUT_FILENO);
			ft_putstr_fd("\n", STDOUT_FILENO);
		}
	}
	return (target_dir);
}

char	*resolve_target_dir(char **argv, char **envp)
{
	if (argv[1] == NULL || ft_strcmp(argv[1], "~") == 0 || ft_strcmp(argv[1],
			"-") == 0)
		return (handle_home_dash(argv[1], envp));
	else if (argv[2] != NULL)
	{
		ft_putstr_fd("cd : too many arguments\n", STDERR_FILENO);
		return (NULL);
	}
	else
		return (argv[1]);
}

int	change_directory(char *target_dir, char **envp, char *old_pwd)
{
	char	new_pwd[PATH_MAX];

	if (!target_dir)
		return (1);
	if (chdir(target_dir) != 0)
	{
		ft_putstr_fd("minishell: cd: ", STDERR_FILENO);
		ft_putstr_fd(target_dir, STDERR_FILENO);
		ft_putstr_fd(": ", STDERR_FILENO);
		ft_putstr_fd(strerror(errno), STDERR_FILENO);
		ft_putstr_fd("\n", STDERR_FILENO);
		return (1);
	}
	if (getcwd(new_pwd, sizeof(new_pwd)) == NULL)
		return (perror("pwd"), 1);
	update_env_var(&envp, "OLDPWD", old_pwd);
	update_env_var(&envp, "PWD", new_pwd);
	return (0);
}


>>> echo/

====================
=  echo/ft_echo.c  =
====================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_echo.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: kadferna <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/08/21 22:16:08 by kadferna          #+#    #+#             */
/*   Updated: 2025/09/15 09:58:30 by kadferna         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../../minishell.h"

char	*process_arguments(const char *str)
{
	char	*processed_str;
	char	quote;

	quote = 0;
	processed_str = malloc(sizeof(char) * (ft_strlen(str) + 1));
	if (!processed_str)
		return (NULL);
	find_quote(str, processed_str, quote);
	return (processed_str);
}

int	check_on_evnp(char *variable_name, char **envp)
{
	int		i;
	size_t	len;
	char	*modified_name;

	if (!variable_name || *variable_name == '\0')
		return (-1);
	modified_name = ft_strdup(variable_name);
	len = ft_strlen(modified_name);
	i = 0;
	while (envp[i] != NULL)
	{
		if (ft_strncmp(modified_name, envp[i], len) == 0 && (envp[i][len] == '='
			|| envp[i][len] == '\0'))
		{
			free(modified_name);
			return (i);
		}
		i++;
	}
	free(modified_name);
	return (-1);
}

char	*expand_and_replace_vars(char *str, char ***envp_ptr, int exit_code)
{
	char			*result;
	char			*final_str;
	int				i;
	t_expand_data	data;

	result = ft_calloc(ft_strlen(str) * 4 + 20, sizeof(char));
	if (!result)
		return (ft_strdup(str));
	data.result = result;
	data.envp_ptr = envp_ptr;
	data.exit_code = exit_code;
	data.j = 0;
	i = 0;
	while (str[i])
	{
		if (str[i] == '$' && str[i + 1])
			data.j = process_dollar_sign(str, &i, &data);
		else
			data.result[data.j++] = str[i++];
	}
	data.result[data.j] = '\0';
	final_str = ft_strdup(data.result);
	free(data.result);
	return (final_str);
}

static int	process_n_flags(char **argv, int *i)
{
	int	j;
	int	new_line;

	new_line = 1;
	j = 1;
	while (argv[*i] && argv[*i][0] == '-' && argv[*i][1] == 'n')
	{
		j = 1;
		while (argv[*i][j] == 'n')
			j++;
		if (argv[*i][j] != '\0')
			break ;
		new_line = 0;
		(*i)++;
	}
	return (new_line);
}

int	ft_echo(char **argv)
{
	int	i;
	int	new_line;

	i = 1;
	new_line = process_n_flags(argv, &i);
	while (argv[i] != NULL)
	{
		write(STDOUT_FILENO, argv[i], ft_strlen(argv[i]));
		if (argv[i + 1])
			write(STDOUT_FILENO, " ", 1);
		i++;
	}
	if (new_line)
		write(STDOUT_FILENO, "\n", 1);
	return (0);
}

===========================
=  echo/ft_echo_utils1.c  =
===========================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_echo_utils1.c                                   :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: kadferna <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/09/16 17:19:36 by kadferna          #+#    #+#             */
/*   Updated: 2025/09/16 17:19:39 by kadferna         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../../minishell.h"

int	append_to_result(char *result, int j, char *str_to_append)
{
	return (append_str(result, j, str_to_append));
}

int	handle_special_vars(char *str, int *i, t_expand_data *data)
{
	char	*temp_str;

	if (str[*i + 1] == '?')
	{
		temp_str = ft_itoa(data->exit_code);
		data->j += append_to_result(data->result, data->j, temp_str);
		free(temp_str);
		*i += 2;
	}
	else if (str[*i + 1] == '$')
	{
		temp_str = ft_itoa(getpid());
		data->j += append_to_result(data->result, data->j, temp_str);
		free(temp_str);
		*i += 2;
	}
	return (data->j);
}

int	handle_env_var_expansion(char *var_name, t_expand_data *data)
{
	int		env_index;
	char	*var_value;

	env_index = check_on_evnp(var_name, *(data->envp_ptr));
	if (env_index >= 0)
	{
		var_value = get_variable_value(env_index, *(data->envp_ptr));
		data->j += append_to_result(data->result, data->j, var_value);
		free(var_value);
	}
	return (env_index);
}

int	handle_regular_vars(char *str, int *i, t_expand_data *data)
{
	char	*var_name;

	var_name = detect_varaible_name(&str[*i]);
	if (var_name && ft_strlen(var_name) > 0)
	{
		handle_env_var_expansion(var_name, data);
		*i += ft_strlen(var_name) + 1;
		free(var_name);
	}
	else
	{
		data->result[data->j++] = str[(*i)++];
		if (var_name)
			free(var_name);
	}
	return (data->j);
}

int	process_dollar_sign(char *str, int *i, t_expand_data *data)
{
	if (str[*i + 1] == '?' || str[*i + 1] == '$')
	{
		data->j = handle_special_vars(str, i, data);
	}
	else
	{
		data->j = handle_regular_vars(str, i, data);
	}
	return (data->j);
}

===========================
=  echo/ft_echo_utils2.c  =
===========================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_echo_utils2.c                                   :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: kadferna <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/09/16 17:57:51 by kadferna          #+#    #+#             */
/*   Updated: 2025/09/16 17:57:53 by kadferna         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../../minishell.h"

void	find_quote(const char *str, char *processed_str, int quote)
{
	int	i;
	int	j;

	i = 0;
	j = 0;
	while (str[i])
	{
		if ((str[i] == '\'' || str[i] == '"'))
		{
			if (!quote)
				quote = str[i];
			else if (quote == str[i])
				quote = 0;
			else
				processed_str[j++] = str[i];
			i++;
			continue ;
		}
		else
			processed_str[j++] = str[i++];
	}
	processed_str[j] = '\0';
}

==========================
=  echo/ft_echo_utils.c  =
==========================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_echo_utils.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: anjbaiju <anjbaiju@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/09/05 12:31:34 by kadferna          #+#    #+#             */
/*   Updated: 2025/09/09 15:40:56 by anjbaiju         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../../minishell.h"

char	*get_variable_value(int index, char **envp_ptr)
{
	char	*env_var;
	char	*equal_pos;

	if (!envp_ptr || index < 0 || !envp_ptr[index])
		return (NULL);
	env_var = envp_ptr[index];
	equal_pos = ft_strchr(env_var, '=');
	if (!equal_pos || *(equal_pos + 1) == '\0')
		return (ft_strdup(""));
	return (ft_strdup(equal_pos + 1));
}

char	*modify_variable(char *str)
{
	int		i;
	int		j;
	char	*modified_str;

	if ((int)ft_strlen(str) < 0)
		return (NULL);
	i = 1;
	j = 0;
	modified_str = malloc(sizeof(char) * ft_strlen(str));
	if (!modified_str)
		return (NULL);
	while (str[i] != '\0')
	{
		modified_str[j] = str[i];
		i++;
		j++;
	}
	modified_str[j] = '\0';
	return (modified_str);
}

char	*detect_varaible_name(char *str)
{
	int		start;
	int		end;
	char	*var_name;

	if (str[0] != '$' || !str[1])
		return (NULL);
	start = 1;
	if (!ft_isalpha(str[start]) && str[start] != '_')
		return (NULL);
	end = start + 1;
	while (str[end] && (ft_isalnum(str[end]) || str[end] == '_'))
		end++;
	var_name = malloc(end - start + 1);
	if (!var_name)
		return (NULL);
	ft_strlcpy(var_name, str + start, end - start + 1);
	return (var_name);
}

int	validate_quotes(const char *str)
{
	int	i;
	int	single_quote;
	int	double_quote;

	i = 0;
	single_quote = 0;
	double_quote = 0;
	while (str[i])
	{
		if (str[i] == '\'' && double_quote == 0)
			single_quote = !single_quote;
		else if (str[i] == '"' && single_quote == 0)
			double_quote = !double_quote;
		i++;
	}
	if (single_quote || double_quote)
	{
		write(2, "minishell: syntax error: unmatched quote\n", 41);
		return (0);
	}
	return (1);
}

int	append_str(char *dest, int start_index, const char *src)
{
	int	k;

	k = 0;
	if (!src)
		return (0);
	while (src[k])
	{
		dest[start_index + k] = src[k];
		k++;
	}
	return (k);
}


>>> env/

==================
=  env/ft_env.c  =
==================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_env.c                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: kadferna <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/09/05 12:41:25 by kadferna          #+#    #+#             */
/*   Updated: 2025/09/05 12:41:27 by kadferna         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../../minishell.h"

int	ft_env(char **envp_ptr)
{
	int	i;

	i = 0;
	if (!envp_ptr || !*envp_ptr)
		return (1);
	while (envp_ptr[i] != NULL)
	{
		ft_putstr_fd(envp_ptr[i], STDOUT_FILENO);
		ft_putstr_fd("\n", STDOUT_FILENO);
		i++;
	}
	return (0);
}


>>> exit/

====================
=  exit/ft_exit.c  =
====================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_exit.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: kadferna <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/09/03 13:09:06 by kadferna          #+#    #+#             */
/*   Updated: 2025/09/03 13:09:08 by kadferna         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../../minishell.h"

int	ft_isdigit_str(const char *str)
{
	int	i;

	i = 0;
	if (str[i] == '-' || str[i] == '+')
		i++;
	while (str[i])
	{
		if (!ft_isdigit(str[i]))
			return (0);
		i++;
	}
	return (1);
}

int	check_arg_value(char *str)
{
	size_t	i;
	int		exit_code;

	i = ft_strlen(str);
	exit_code = ft_atoi(str);
	if (i > 0 && exit_code == 0)
	{
		ft_putstr_fd("minishell : numeric argument required\n", STDERR_FILENO);
		exit_code = 2;
	}
	return (exit_code);
}

int	ft_exit_builtin(char **envp, t_ast_node *pipe, t_command_node *cmd,
		int code)
{
	int	exit_code;

	exit_code = 0;
	if (cmd)
	{
		if (argv_list_len(cmd->argv) == 2)
			exit_code = check_arg_value(cmd->argv[1]);
		else if (argv_list_len(cmd->argv) > 2)
		{
			ft_putstr_fd("minishell : too many argumens\n", STDERR_FILENO);
			exit_code = 1;
		}
	}
	free_environment(envp);
	free_ast(pipe);
	printf("exit\n");
	if (code > 0)
		exit_code = code;
	if (exit_code > 255)
		exit_code = modulo_val(exit_code);
	exit(exit_code);
	return (exit_code);
}

int	ft_exit_nomsg(char **envp, t_ast_node *pipe, int code)
{
	int	exit_code;

	exit_code = 0;
	free_environment(envp);
	free_ast(pipe);
	if (code > 0)
		exit_code = code;
	exit(exit_code);
	return (exit_code);
}

===========================
=  exit/ft_exit_helper.c  =
===========================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_exit_helper.c                                   :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: kadferna <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/09/20 00:40:41 by kadferna          #+#    #+#             */
/*   Updated: 2025/09/20 00:41:03 by kadferna         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../../minishell.h"

int	modulo_val(int exit_code)
{
	int	mod_val;

	mod_val = exit_code % 256;
	return (mod_val);
}

int	argv_list_len(char **argv)
{
	int	i;

	if (!argv)
		return (0);
	i = 0;
	while (argv[i] != NULL)
		i++;
	return (i);
}


>>> expand_vars/

==================================
=  expand_vars/ft_expand_vars.c  =
==================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_expand_vars.c                                   :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: anjbaiju <anjbaiju@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/09/15 10:15:57 by kadferna          #+#    #+#             */
/*   Updated: 2025/09/19 14:28:55 by anjbaiju         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../../minishell.h"

char	*remove_quotes_and_expand(const char *str)
{
	char	*result;
	int		i;
	int		j;
	char	quote_char;

	result = (char *)malloc(ft_strlen(str) + 1);
	if (!result)
		return (NULL);
	i = 0;
	j = 0;
	quote_char = 0;
	while (str[i])
	{
		if ((str[i] == 39 || str[i] == 34) && quote_char == 0)
			quote_char = str[i];
		else if (str[i] == quote_char)
			quote_char = 0;
		else
			result[j++] = str[i];
		i++;
	}
	result[j] = '\0';
	return (result);
}

char	*remove_quotes(const char *str)
{
	size_t	len;
	char	*result;

	if (!str)
		return (NULL);
	len = ft_strlen(str);
	if (len < 2)
		return (ft_strdup(str));
	result = ft_substr(str, 1, len - 2);
	return (result);
}

char	*expand_and_process_arguemetns(char *curr_str, char ***envp_ptr,
		int exit)
{
	char	*temp_str;
	char	*mod_str;

	temp_str = process_arguments(curr_str);
	if (!temp_str)
		return (NULL);
	mod_str = expand_and_replace_vars(temp_str, envp_ptr, exit);
	if (temp_str)
		free(temp_str);
	return (mod_str);
}

static void	replace_given_val(t_token *current)
{
	free(current->value);
	current->value = ft_strdup("");
}

void	expand_token_variables(t_token *tokens, int exit, char ***envp_ptr)
{
	t_token	*current;
	char	*mod_str;

	current = tokens;
	while (current)
	{
		if (current->type == TOKEN_WORD && current->value)
		{
			if (is_single_quoted(current->value))
				mod_str = remove_quotes_and_expand(current->value);
			else
				mod_str = expand_and_process_arguemetns(current->value,
						envp_ptr, exit);
			if (mod_str)
			{
				free(current->value);
				current->value = mod_str;
			}
			else
				replace_given_val(current);
		}
		current = current->next;
	}
}


>>> export/

========================
=  export/ft_export.c  =
========================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_export.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: kadferna <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/09/03 11:41:13 by kadferna          #+#    #+#             */
/*   Updated: 2025/09/03 11:41:14 by kadferna         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../../minishell.h"

char	*get_variable_name(char **argv)
{
	char	*variable_name;
	int		i;
	int		count;

	if (!argv || !argv[1])
		return (NULL);
	i = 0;
	while (argv[1][i] && argv[1][i] != '=')
		i++;
	count = i;
	variable_name = malloc(sizeof(char) * (count + 1));
	if (!variable_name)
		return (NULL);
	i = 0;
	while (i < count)
	{
		variable_name[i] = argv[1][i];
		i++;
	}
	variable_name[count] = '\0';
	return (variable_name);
}

int	add_new_variable(char ***envp_ptr, const char *new_var_str)
{
	char	**new_envp;
	int		count;
	int		i;

	count = 0;
	while ((*envp_ptr)[count])
		count++;
	new_envp = malloc((count + 2) * sizeof(char *));
	if (!new_envp)
		return (perror("minishell: malloc"), 0);
	i = 0;
	while (i < count)
	{
		new_envp[i] = (*envp_ptr)[i];
		i++;
	}
	new_envp[count] = ft_strdup(new_var_str);
	if (!new_envp[count])
		return (perror("minishell: ft_strdup"), free(new_envp), 0);
	new_envp[count + 1] = NULL;
	free(*envp_ptr);
	*envp_ptr = new_envp;
	return (1);
}

void	sort_envp(char **copy_envp)
{
	int		i;
	int		sorted;
	char	*temp;

	if (!copy_envp || !copy_envp[0])
		return ;
	sorted = 0;
	while (!sorted)
	{
		sorted = 1;
		i = 1;
		while (copy_envp[i])
		{
			if (ft_strncmp(copy_envp[i], copy_envp[i - 1],
					ft_strlen(copy_envp[i])) < 0)
			{
				temp = copy_envp[i];
				copy_envp[i] = copy_envp[i - 1];
				copy_envp[i - 1] = temp;
				sorted = 0;
			}
			i++;
		}
	}
}

int	update_envp(char ***envp_ptr, char **argv)
{
	int	exists_index;

	exists_index = check_exists(argv, *envp_ptr);
	if (exists_index >= 0)
	{
		free((*envp_ptr)[exists_index]);
		(*envp_ptr)[exists_index] = ft_strdup(argv[1]);
		if (!(*envp_ptr)[exists_index])
			return (1);
	}
	else
	{
		if (!add_new_variable(envp_ptr, argv[1]))
			return (1);
	}
	return (0);
}

int	ft_export(char **argv, char ***envp_ptr)
{
	if (argv[1] == NULL)
	{
		print_envp(*envp_ptr);
		return (0);
	}
	if (!check_args(argv[1]))
		return (1);
	if (update_envp(envp_ptr, argv))
		return (1);
	return (0);
}

==============================
=  export/ft_export_utils.c  =
==============================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_export_utils.c                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: kadferna <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/09/16 20:50:52 by kadferna          #+#    #+#             */
/*   Updated: 2025/09/16 20:50:55 by kadferna         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../../minishell.h"

int	count_envp(char **envp)
{
	int	i;

	i = 0;
	while (envp[i] != NULL)
		i++;
	return (i);
}

int	is_valid_variable_char(char c)
{
	return (ft_isalnum(c) || c == '_');
}

int	check_args(char *argv)
{
	int	i;

	if (!argv || !*argv)
		return (ft_putstr_fd("export: `': not a valid identifier\n",
				STDERR_FILENO), 0);
	if (!(ft_isalpha(argv[0]) || argv[0] == '_'))
	{
		ft_putstr_fd("export: `", STDERR_FILENO);
		ft_putstr_fd(argv, STDERR_FILENO);
		ft_putstr_fd("': not a valid identifier\n", STDERR_FILENO);
		return (0);
	}
	i = 1;
	while (argv[i] && argv[i] != '=')
	{
		if (!is_valid_variable_char(argv[i]))
		{
			ft_putstr_fd("export: `", STDERR_FILENO);
			return (ft_putstr_fd(argv, STDERR_FILENO),
				ft_putstr_fd("': not a valid identifier\n", STDERR_FILENO), 0);
		}
		i++;
	}
	return (1);
}

void	print_envp(char **envp)
{
	int	i;

	i = 0;
	sort_envp(envp);
	while (envp[i])
	{
		printf("declare -x %s\n", envp[i]);
		i++;
	}
}

int	check_exists(char **argv, char **envp)
{
	int		i;
	char	*variable_name;
	size_t	len;

	variable_name = get_variable_name(argv);
	if (!variable_name || *variable_name == '\0')
	{
		if (variable_name)
			free(variable_name);
		return (-1);
	}
	len = ft_strlen(variable_name);
	i = 0;
	while (envp[i] != NULL)
	{
		if (ft_strncmp(variable_name, envp[i], len) == 0 && (envp[i][len] == '='
			|| envp[i][len] == '\0'))
		{
			free(variable_name);
			return (i);
		}
		i++;
	}
	free(variable_name);
	return (-1);
}


>>> pwd/

==================
=  pwd/ft_pwd.c  =
==================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_pwd.c                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: kadferna <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/09/03 11:35:51 by kadferna          #+#    #+#             */
/*   Updated: 2025/09/03 11:35:53 by kadferna         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../../minishell.h"

int	ft_pwd(void)
{
	char	cwd[1024];

	if (getcwd(cwd, sizeof(cwd)) != NULL )
	{
		ft_putstr_fd(cwd, STDOUT_FILENO);
		ft_putstr_fd("\n", STDOUT_FILENO);
	}
	else
	{
		perror("pwd");
		return (1);
	}
	return (0);
}


>>> unset/

======================
=  unset/ft_unset.c  =
======================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_unset.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: kadferna <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/09/05 14:24:30 by kadferna          #+#    #+#             */
/*   Updated: 2025/09/05 14:24:34 by kadferna         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../../minishell.h"

int	copy_variables(char **new_envp, char **old_envp, int remove_idx, int count)
{
	int	i;
	int	j;

	j = 0;
	i = 0;
	while (i < count)
	{
		if (i != remove_idx)
		{
			new_envp[j] = old_envp[i];
			j++;
		}
		else
			free(old_envp[i]);
		i++;
	}
	new_envp[j] = NULL;
	return (1);
}

int	remove_variable(char ***envp_ptr, char *var_to_remove)
{
	char	**new_envp;
	int		count;
	int		remove_idx;

	count = count_env_variables(*envp_ptr);
	remove_idx = find_variable_index(*envp_ptr, var_to_remove);
	if (remove_idx == -1)
		return (1);
	new_envp = allocate_new_envp(count);
	if (!new_envp)
		return (0);
	copy_variables(new_envp, *envp_ptr, remove_idx, count);
	free(*envp_ptr);
	*envp_ptr = new_envp;
	return (1);
}

int	ft_unset(char **argv, char ***envp)
{
	int	i;

	if (!argv[1])
		return (0);
	i = 1;
	while (argv[i])
	{
		if (!remove_variable(envp, argv[i]))
			return (1);
		i++;
	}
	return (0);
}

============================
=  unset/ft_unset_utils.c  =
============================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_unset_utils.c                                   :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: kadferna <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/09/07 16:21:02 by kadferna          #+#    #+#             */
/*   Updated: 2025/09/07 16:21:05 by kadferna         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../../minishell.h"

int	count_env_variables(char **envp)
{
	int	count;

	count = 0;
	while (envp[count])
		count++;
	return (count);
}

int	find_variable_index(char **envp, char *var_to_remove)
{
	int	i;
	int	var_len;

	var_len = ft_strlen(var_to_remove);
	i = 0;
	while (envp[i])
	{
		if (strncmp(envp[i], var_to_remove, var_len) == 0
			&& (envp[i][var_len] == '=' || envp[i][var_len] == '\0'))
		{
			return (i);
		}
		i++;
	}
	return (-1);
}

char	**allocate_new_envp(int size)
{
	char	**new_envp;

	new_envp = malloc(size * sizeof(char *));
	if (!new_envp)
	{
		perror("minishell: malloc");
		return (NULL);
	}
	return (new_envp);
}


